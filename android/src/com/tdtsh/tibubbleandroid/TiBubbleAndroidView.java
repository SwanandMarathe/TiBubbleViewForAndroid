/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.tdtsh.tibubbleandroid;

import org.appcelerator.kroll.KrollDict;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiDimension;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutParams;

import android.content.Context;
import android.widget.FrameLayout;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.app.Activity;
import android.os.Build;

public class TiBubbleAndroidView extends TiUIView {
	private KrollDict prop;
	private NativeBubbleView nativeBubbleView = null;

	public TiBubbleAndroidView(TiViewProxy proxy) {
		super(proxy);

		prop = proxy.getProperties();

		LayoutArrangement arrangement = LayoutArrangement.DEFAULT;

		if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
			String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));
			if (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {
				arrangement = LayoutArrangement.HORIZONTAL;
			} else if (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {
				arrangement = LayoutArrangement.VERTICAL;
			}
		}

		TiCompositeLayout nativeView = new TiCompositeLayout(proxy.getActivity(), arrangement);
		setNativeView(nativeView);

		if (nativeBubbleView == null) {
			Activity currentActivity = proxy.getActivity();
			if (currentActivity == null) {
				currentActivity = TiApplication.getAppCurrentActivity();
			}
			nativeBubbleView = new NativeBubbleView(currentActivity);

			LayoutParams params = new LayoutParams();
			params.height = android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
			params.width = android.widget.FrameLayout.LayoutParams.MATCH_PARENT;

			ViewGroup savedParent = null;
			int childIndex = -1;

			TiUIView parentView = proxy.getParent().getOrCreateView();
			View parentNativeView = (View) parentView.getNativeView();

			if (parentNativeView != null) {
				ViewParent nativeParent = (ViewParent) parentNativeView;

				if (nativeParent instanceof ViewGroup) {
					savedParent = (ViewGroup) nativeParent;
					childIndex = savedParent.indexOfChild(nativeView);
					savedParent.removeView(nativeView);
				}
			}

			nativeBubbleView.addView(nativeView, params);

			if (savedParent != null) {
				savedParent.addView(nativeBubbleView, childIndex, getLayoutParams());
			}

			if (prop.containsKey("bubbleRadius")) {
				float radius = 0;
				TiDimension radiusDim = TiConvert.toTiDimension(prop.get("bubbleRadius"), TiDimension.TYPE_WIDTH);
				if (radiusDim != null) {
					radius = (float) radiusDim.getPixels(getNativeView());
				}
				nativeBubbleView.setBubbleRadius(radius);
			}

			if (prop.containsKey("bubbleColor")) {
				nativeBubbleView.setBubbleColor(TiConvert.toColor(prop, "bubbleColor"));
			} else {
				Integer bgColor = TiConvert.toColor(prop, TiC.PROPERTY_BACKGROUND_COLOR);
				if (bgColor != null) {
					nativeBubbleView.setBubbleColor(bgColor);
				}
			}

			if (prop.containsKey("bubbleBeak")) {
				nativeBubbleView.setBubbleBeak(TiConvert.toInt(prop, "bubbleBeak"));
			}

			if (prop.containsKey("bubbleBeakVertical")) {
				nativeBubbleView.setBubbleBeakVertical(TiConvert.toInt(prop, "bubbleBeakVertical"));
			}

			parentView.remove(this);
			parentView.add(this);
		}
	}

}
